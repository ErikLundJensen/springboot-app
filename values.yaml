# Default values for discovery-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: paulczar/petclinic
  tag: 2.1.0.BUILD-SNAPSHOT
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  # name: ~

rbac:
  create: false

podAnnotations: {}
#  prometheus.io/scrape: "true"
#  prometheus.io/path: "/actuator/prometheus"

#container:
#  debug:
#    shellAtStartup: true

spring:
  debug: false

  ## Uncomment if you want to activate a specfic spring profile
  # profile: kubernetes
  ## Ensures that Spring trusts Kubernetes certificate for use with
  ## service discovery, configuration, etc.
  trustKubernetesCertificates: true
  ## customized parameters/config for your spring app.
  ## by default will be rendered to `/config/application.yml`
  #config:
    #   foo: bar
    #   another: value
  # secrets:
  #   names:
  #     - mysecret
  #     - myothersecret

## The list of ports that your app listens on
containerPort: 8080

extraEnv: {}
  ## Extra environment variables to be injected
  # DATABASE_ENGINE: mysql
  # DATABASE_HOST: mysql
  # DATABASE_NAME: spring
  # DATABASE_USERNAME: spring
  # DATABASE_PASSWORD: spring

securityContext: {}
  # runAsUser: 1000
  # fsGroup: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

## uncomment and modify the following livenessProbe and readinessProbe.
## These defaults should work with anything that uses the spring health actuator.
liveness:
  enabled: true
  probe:
    httpGet:
      path: /actuactor/info
      port: http
    initialDelaySeconds: 120
    periodSeconds: 10
readiness:
  enabled: true
  probe:
    httpGet:
      path: /actuator/health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 10

nodeSelector: {}

tolerations: []

affinity: {}

service:
  enabled: true
  httpPort: 8080
  ## If service.type is not set to NodePort, the following statement
  ## will be ignored.
  ##
  # nodePort: 32015

  ## Service type can be set to ClusterIP, NodePort or LoadBalancer.
  ##
  type: ClusterIP

  ## Service annotations
  ##
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
  #   service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:xx-xxxx-x:xxxxxxxxxxx:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx
  #   external-dns.alpha.kubernetes.io/hostname: drone.domain.tld.

ingress:
  ## If true, Ingress will be created.
  ##
  enabled: false
  dnswildcard: apps.rke1.test.2108.dk

  ## Ingress annotations
  ##
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-public"

  ## hostnames must be provided if Ingress is enabled
  ##
  hosts:
     - apps.rke1.test.2108.dk

podDisruptionBudget:
  enabled: false
  minAvailable: 1